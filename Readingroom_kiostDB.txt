-- ▼ 안전하게 기존 SEQUENCE 삭제
BEGIN
  FOR rec IN (
    SELECT sequence_name FROM user_sequences
    WHERE sequence_name IN (
      'SEQ_USER_ID', 'SEQ_ADMIN_ID', 'SEQ_SEAT_ID',
      'SEQ_RESERVATION_ID', 'SEQ_PLAN_ID', 'SEQ_PAYMENT_ID',
      'SEQ_MILEAGE_ID', 'SEQ_ACTION_LOG_ID'
    )
  )
  LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || rec.sequence_name;
  END LOOP;
END;
/

-- ▼ 안전하게 기존 TABLE 삭제
BEGIN
  FOR rec IN (
    SELECT table_name FROM user_tables
    WHERE table_name IN (
      'ADMIN_ACTIONS', 'MILEAGE', 'PAYMENTS', 'RESERVATIONS',
      'SEATS', 'PLANS', 'ADMINS', 'USERS'
    )
  )
  LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || rec.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
END;
/

-- ▼ VIEW 삭제 (있을 경우)
BEGIN
  EXECUTE IMMEDIATE 'DROP VIEW MILEAGE_SUMMARY';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

-- ▼ 시퀀스 생성
CREATE SEQUENCE SEQ_USER_ID;
CREATE SEQUENCE SEQ_ADMIN_ID;
CREATE SEQUENCE SEQ_SEAT_ID;
CREATE SEQUENCE SEQ_RESERVATION_ID;
CREATE SEQUENCE SEQ_PLAN_ID;
CREATE SEQUENCE SEQ_PAYMENT_ID;
CREATE SEQUENCE SEQ_MILEAGE_ID;
CREATE SEQUENCE SEQ_ACTION_LOG_ID;

-- ▼ 테이블 생성
CREATE TABLE USERS (
    user_id       VARCHAR2(20) PRIMARY KEY,
    name          VARCHAR2(100),
    phone_number  VARCHAR2(20) NOT NULL UNIQUE,
    password      VARCHAR2(100) NOT NULL,
    status        VARCHAR2(20),
    created_at    DATE DEFAULT SYSDATE,
    updated_at    DATE
);

CREATE TABLE ADMINS (
    admin_id   NUMBER PRIMARY KEY,
    username   VARCHAR2(50) NOT NULL UNIQUE,
    password   VARCHAR2(100) NOT NULL,
    created_at DATE DEFAULT SYSDATE
);

CREATE TABLE SEATS (
    seat_id     NUMBER PRIMARY KEY,
    seat_number VARCHAR2(10) NOT NULL UNIQUE,
    seat_type   VARCHAR2(20),
    status      VARCHAR2(20) CHECK (status IN ('사용가능', '예약됨', '사용중', 'closed')),
    updated_at  DATE
);

CREATE TABLE RESERVATIONS (
    reservation_id NUMBER PRIMARY KEY,
    user_id        VARCHAR2(20),
    seat_id        NUMBER,
    start_time     TIMESTAMP,
    end_time       TIMESTAMP,
    status         VARCHAR2(20),
    created_at     DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id),
    FOREIGN KEY (seat_id) REFERENCES SEATS(seat_id)
);

CREATE TABLE PLANS (
    plan_id      NUMBER PRIMARY KEY,
    name         VARCHAR2(100),
    duration_min NUMBER,
    price        NUMBER,
    description  VARCHAR2(200),
    created_at   DATE DEFAULT SYSDATE
);

CREATE TABLE PAYMENTS (
    payment_id     NUMBER PRIMARY KEY,
    user_id        VARCHAR2(20),
    plan_id        NUMBER,
    reservation_id NUMBER,
    mileage_used   NUMBER,
    total_amount   NUMBER,
    payment_time   DATE DEFAULT SYSDATE,
    status         VARCHAR2(20),
    FOREIGN KEY (user_id) REFERENCES USERS(user_id),
    FOREIGN KEY (plan_id) REFERENCES PLANS(plan_id),
    FOREIGN KEY (reservation_id) REFERENCES RESERVATIONS(reservation_id)
);

CREATE TABLE MILEAGE (
    mileage_id    NUMBER PRIMARY KEY,
    user_id       VARCHAR2(20),
    change_amount NUMBER,
    reason        VARCHAR2(200),
    created_at    DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE TABLE ADMIN_ACTIONS (
    log_id      NUMBER PRIMARY KEY,
    admin_id    NUMBER,
    action_type VARCHAR2(100),
    target_info VARCHAR2(200),
    action_time DATE DEFAULT SYSDATE,
    FOREIGN KEY (admin_id) REFERENCES ADMINS(admin_id)
);

-- ▼ VIEW: 마일리지 합계
CREATE OR REPLACE VIEW MILEAGE_SUMMARY AS
SELECT user_id, SUM(change_amount) AS total_mileage
FROM MILEAGE
GROUP BY user_id;

-- ▼ 트리거: 마일리지 자동 적립
CREATE OR REPLACE TRIGGER TRG_MILEAGE_AUTOEARN
AFTER INSERT ON PAYMENTS
FOR EACH ROW
WHEN (NEW.status = 'completed')
DECLARE
  v_mileage NUMBER;
BEGIN
  v_mileage := :NEW.total_amount * 0.05;
  INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
  VALUES (SEQ_MILEAGE_ID.NEXTVAL, :NEW.user_id, v_mileage, '자동 적립', SYSDATE);
END;
/

-- ▼ 트리거: 예약 시간 유효성 검사
CREATE OR REPLACE TRIGGER TRG_RESERVATION_TIME_VALIDATION
BEFORE INSERT OR UPDATE ON RESERVATIONS
FOR EACH ROW
BEGIN
  IF :NEW.start_time >= :NEW.end_time THEN
    RAISE_APPLICATION_ERROR(-20002, '시작 시간이 종료 시간보다 같거나 늦을 수 없습니다.');
  END IF;
END;
/

-- ▼ 프로시저: 결제 및 좌석 상태 변경 (시간 오차 보정 포함)
CREATE OR REPLACE PROCEDURE PROC_RESERVE_AND_PAY (
    p_user_id       IN VARCHAR2,
    p_seat_id       IN NUMBER,
    p_plan_id       IN NUMBER,
    p_start_time    IN TIMESTAMP,
    p_end_time      IN TIMESTAMP,
    p_mileage_use   IN NUMBER DEFAULT 0
)
IS
    v_reservation_id RESERVATIONS.reservation_id%TYPE;
    v_amount         NUMBER;
    v_count          NUMBER;
    v_status         VARCHAR2(20);
BEGIN
    -- 현재 시간 기준 예약인지 즉시 사용인지 판단 (30초 오차 허용)
    IF p_start_time <= CURRENT_TIMESTAMP + INTERVAL '30' SECOND THEN
        v_status := '사용중';
    ELSE
        v_status := '예약됨';
    END IF;

    -- 예약 중복 여부 검사
    SELECT COUNT(*) INTO v_count
    FROM RESERVATIONS
    WHERE seat_id = p_seat_id
      AND status IN ('예약됨', '사용중')
      AND p_start_time < end_time
      AND p_end_time > start_time;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '좌석이 이미 예약되어 있습니다.');
    END IF;

    -- 예약 등록
    INSERT INTO RESERVATIONS (
        reservation_id, user_id, seat_id, start_time, end_time, status, created_at
    ) VALUES (
        SEQ_RESERVATION_ID.NEXTVAL, p_user_id, p_seat_id,
        p_start_time, p_end_time, v_status, SYSDATE
    )
    RETURNING reservation_id INTO v_reservation_id;

    -- 요금 조회 및 결제 등록
    SELECT price INTO v_amount FROM PLANS WHERE plan_id = p_plan_id;
    v_amount := v_amount - p_mileage_use;

    INSERT INTO PAYMENTS (
        payment_id, user_id, plan_id, reservation_id,
        mileage_used, total_amount, status, payment_time
    ) VALUES (
        SEQ_PAYMENT_ID.NEXTVAL, p_user_id, p_plan_id, v_reservation_id,
        p_mileage_use, v_amount, 'completed', SYSDATE
    );

    IF p_mileage_use > 0 THEN
        INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
        VALUES (SEQ_MILEAGE_ID.NEXTVAL, p_user_id, -p_mileage_use, '마일리지 사용', SYSDATE);
    END IF;

    -- 좌석 상태 갱신은 즉시 이용 시만 반영
    IF v_status = '사용중' THEN
        UPDATE SEATS
        SET status = '사용중',
            updated_at = SYSDATE
        WHERE seat_id = p_seat_id;
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- ▼ 좌석 초기화
DELETE FROM SEATS;
COMMIT;

DROP SEQUENCE SEQ_SEAT_ID;
CREATE SEQUENCE SEQ_SEAT_ID START WITH 1 INCREMENT BY 1;

BEGIN
  FOR i IN 1..10 LOOP
    INSERT INTO SEATS (seat_id, seat_number, seat_type, status, updated_at)
    VALUES (
      SEQ_SEAT_ID.NEXTVAL,
      TO_CHAR(i) || '번',
      CASE MOD(i, 3)
        WHEN 0 THEN '1인실'
        WHEN 1 THEN '2인실'
        ELSE '다인실'
      END,
      '사용가능',
      SYSDATE
    );
  END LOOP;
END;
/

-- ▼ 요금제 초기화
BEGIN
  INSERT INTO PLANS (plan_id, name, duration_min, price, description)
  VALUES (SEQ_PLAN_ID.NEXTVAL, '1시간권', 60, 2000, '1시간 이용권');

  INSERT INTO PLANS (plan_id, name, duration_min, price, description)
  VALUES (SEQ_PLAN_ID.NEXTVAL, '2시간권', 120, 4000, '2시간 이용권');

  INSERT INTO PLANS (plan_id, name, duration_min, price, description)
  VALUES (SEQ_PLAN_ID.NEXTVAL, '3시간권', 180, 5500, '3시간 이용권');

  INSERT INTO PLANS (plan_id, name, duration_min, price, description)
  VALUES (SEQ_PLAN_ID.NEXTVAL, '5시간권', 300, 9000, '5시간 이용권');
END;
/

COMMIT;
