-- ▼ 기존 SEQUENCE 삭제 (존재할 경우만 DROP)
BEGIN
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_USER_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ADMIN_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_SEAT_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_RESERVATION_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_PLAN_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_PAYMENT_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_MILEAGE_ID';
  EXECUTE IMMEDIATE 'DROP SEQUENCE SEQ_ACTION_LOG_ID';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

-- ▼ 기존 TABLE 삭제 (존재할 경우만 DROP)
BEGIN
  EXECUTE IMMEDIATE 'DROP TABLE ADMIN_ACTIONS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE MILEAGE CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE PAYMENTS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE RESERVATIONS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE SEATS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE PLANS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE ADMINS CASCADE CONSTRAINTS';
  EXECUTE IMMEDIATE 'DROP TABLE USERS CASCADE CONSTRAINTS';
EXCEPTION
  WHEN OTHERS THEN NULL;
END;
/

-- ----------------------------
-- 시퀀스 생성
-- ----------------------------
CREATE SEQUENCE SEQ_USER_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ADMIN_ID       START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SEAT_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_RESERVATION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PLAN_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PAYMENT_ID     START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_MILEAGE_ID     START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ACTION_LOG_ID  START WITH 1 INCREMENT BY 1;

-- ----------------------------
-- 테이블 생성
-- ----------------------------
CREATE TABLE USERS (
    user_id       NUMBER PRIMARY KEY,
    name          VARCHAR2(100),
    phone_number  VARCHAR2(20) NOT NULL UNIQUE,
    password      VARCHAR2(100) NOT NULL,
    status        VARCHAR2(20),
    created_at    DATE DEFAULT SYSDATE,
    updated_at    DATE
);

CREATE TABLE ADMINS (
    admin_id   NUMBER PRIMARY KEY,
    username   VARCHAR2(50) NOT NULL UNIQUE,
    password   VARCHAR2(100) NOT NULL,
    created_at DATE DEFAULT SYSDATE
);

CREATE TABLE SEATS (
    seat_id     NUMBER PRIMARY KEY,
    seat_number VARCHAR2(10) NOT NULL UNIQUE,
    seat_type   VARCHAR2(20), -- 1인실, 2인실, 다인실
    status      VARCHAR2(20) CHECK (status IN ('사용가능', '예약됨', '사용중', 'closed')),
    updated_at  DATE
);

CREATE TABLE RESERVATIONS (
    reservation_id NUMBER PRIMARY KEY,
    user_id        NUMBER,
    seat_id        NUMBER,
    start_time     TIMESTAMP,
    end_time       TIMESTAMP,
    status         VARCHAR2(20) CHECK (status IN ('예약됨', '예약완료', 'cancelled')),
    created_at     DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE,
    FOREIGN KEY (seat_id) REFERENCES SEATS(seat_id)
);

CREATE TABLE PLANS (
    plan_id      NUMBER PRIMARY KEY,
    name         VARCHAR2(100),
    duration_min NUMBER,
    price        NUMBER,
    description  VARCHAR2(200),
    created_at   DATE DEFAULT SYSDATE
);

CREATE TABLE PAYMENTS (
    payment_id     NUMBER PRIMARY KEY,
    user_id        NUMBER,
    plan_id        NUMBER,
    reservation_id NUMBER,
    mileage_used   NUMBER,
    total_amount   NUMBER,
    payment_time   DATE DEFAULT SYSDATE,
    status         VARCHAR2(20) CHECK (status IN ('completed', 'cancelled', 'refunded')),
    FOREIGN KEY (user_id)        REFERENCES USERS(user_id),
    FOREIGN KEY (plan_id)        REFERENCES PLANS(plan_id),
    FOREIGN KEY (reservation_id) REFERENCES RESERVATIONS(reservation_id) ON DELETE CASCADE
);

CREATE TABLE MILEAGE (
    mileage_id    NUMBER PRIMARY KEY,
    user_id       NUMBER,
    change_amount NUMBER,
    reason        VARCHAR2(200),
    created_at    DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE TABLE ADMIN_ACTIONS (
    log_id      NUMBER PRIMARY KEY,
    admin_id    NUMBER,
    action_type VARCHAR2(100),
    target_info VARCHAR2(200),
    action_time DATE DEFAULT SYSDATE,
    FOREIGN KEY (admin_id) REFERENCES ADMINS(admin_id)
);

-- ----------------------------
-- 뷰: 마일리지 합계
-- ----------------------------
CREATE OR REPLACE VIEW MILEAGE_SUMMARY AS
SELECT user_id, SUM(change_amount) AS total_mileage
FROM MILEAGE
GROUP BY user_id;

-- ----------------------------
-- 트리거
-- ----------------------------
-- 좌석 예약 시 상태 변경
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Update
AFTER INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
    UPDATE SEATS
    SET status = '예약됨'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 종료 시 좌석 상태 복구
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Release
AFTER UPDATE OF status ON RESERVATIONS
FOR EACH ROW
WHEN (NEW.status = '예약완료')
BEGIN
    UPDATE SEATS
    SET status = '사용가능'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 취소 시 좌석 상태 복구
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Cancel
AFTER UPDATE OF status ON RESERVATIONS
FOR EACH ROW
WHEN (NEW.status = 'cancelled')
BEGIN
    UPDATE SEATS
    SET status = '사용가능'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 시간 유효성 검사
CREATE OR REPLACE TRIGGER TRG_Reservation_Time_Validation
BEFORE INSERT OR UPDATE ON RESERVATIONS
FOR EACH ROW
BEGIN
    IF :NEW.start_time >= :NEW.end_time THEN
        RAISE_APPLICATION_ERROR(-20002, '시작 시간이 종료 시간보다 같거나 늦을 수 없습니다.');
    END IF;
END;
/

-- 결제 완료 시 마일리지 자동 적립
CREATE OR REPLACE TRIGGER TRG_Mileage_AutoEarn
AFTER INSERT ON PAYMENTS
FOR EACH ROW
WHEN (NEW.status = 'completed')
DECLARE
    v_mileage NUMBER;
BEGIN
    v_mileage := :NEW.total_amount * 0.1;
    INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
    VALUES (SEQ_MILEAGE_ID.NEXTVAL, :NEW.user_id, v_mileage, '자동 적립', SYSDATE);
END;
/

-- ----------------------------
-- 프로시저: 예약 + 결제 + 마일리지
-- ----------------------------
CREATE OR REPLACE PROCEDURE PROC_RESERVE_AND_PAY (
    p_user_id       IN NUMBER,
    p_seat_id       IN NUMBER,
    p_plan_id       IN NUMBER,
    p_start_time    IN TIMESTAMP,
    p_end_time      IN TIMESTAMP,
    p_mileage_use   IN NUMBER DEFAULT 0
)
IS
    v_reservation_id RESERVATIONS.reservation_id%TYPE;
    v_amount         NUMBER;
    v_count          NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count
    FROM RESERVATIONS
    WHERE seat_id = p_seat_id
      AND status IN ('예약됨', '사용중')
      AND p_start_time < end_time
      AND p_end_time > start_time;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '좌석이 이미 예약되어 있습니다.');
    END IF;

    INSERT INTO RESERVATIONS (
        reservation_id, user_id, seat_id, start_time, end_time, status, created_at
    ) VALUES (
        SEQ_RESERVATION_ID.NEXTVAL, p_user_id, p_seat_id,
        p_start_time, p_end_time, '예약됨', SYSDATE
    )
    RETURNING reservation_id INTO v_reservation_id;

    SELECT price INTO v_amount FROM PLANS WHERE plan_id = p_plan_id;
    v_amount := v_amount - p_mileage_use;

    INSERT INTO PAYMENTS (
        payment_id, user_id, plan_id, reservation_id,
        mileage_used, total_amount, status, payment_time
    ) VALUES (
        SEQ_PAYMENT_ID.NEXTVAL, p_user_id, p_plan_id, v_reservation_id,
        p_mileage_use, v_amount, 'completed', SYSDATE
    );

    IF p_mileage_use > 0 THEN
        INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
        VALUES (SEQ_MILEAGE_ID.NEXTVAL, p_user_id, -p_mileage_use, '마일리지 사용', SYSDATE);
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

-- ----------------------------
-- 초기 예시 데이터
-- ----------------------------
-- 사용자
INSERT INTO USERS (user_id, name, phone_number, password, status)
VALUES (SEQ_USER_ID.NEXTVAL, '홍길동', '010-1234-5678', 'hashed_pw1', 'active');

INSERT INTO USERS (user_id, name, phone_number, password, status)
VALUES (SEQ_USER_ID.NEXTVAL, '김영희', '010-2345-6789', 'hashed_pw2', 'active');

-- 관리자
INSERT INTO ADMINS (admin_id, username, password)
VALUES (SEQ_ADMIN_ID.NEXTVAL, 'admin1', 'adminpass');

-- 좌석: 10개, 상태 모두 '사용가능', 유형은 랜덤
BEGIN
  FOR i IN 1..10 LOOP
    INSERT INTO SEATS (
        seat_id, seat_number, seat_type, status, updated_at
    ) VALUES (
        SEQ_SEAT_ID.NEXTVAL,
        'S' || i,
        CASE MOD(i, 3)
            WHEN 0 THEN '1인실'
            WHEN 1 THEN '2인실'
            WHEN 2 THEN '다인실'
        END,
        '사용가능',
        SYSDATE
    );
  END LOOP;
END;
/

-- 요금제
INSERT INTO PLANS (plan_id, name, duration_min, price, description)
VALUES (SEQ_PLAN_ID.NEXTVAL, '1시간권', 60, 2000, '1시간 이용권');

INSERT INTO PLANS (plan_id, name, duration_min, price, description)
VALUES (SEQ_PLAN_ID.NEXTVAL, '3시간권', 180, 5000, '3시간 이용권');
