-- -------------------------------------
-- 시퀀스 생성
-- -------------------------------------
CREATE SEQUENCE SEQ_USER_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ADMIN_ID       START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_SEAT_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_RESERVATION_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PLAN_ID        START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_PAYMENT_ID     START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_MILEAGE_ID     START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_ACTION_LOG_ID  START WITH 1 INCREMENT BY 1;

-- -------------------------------------
-- 테이블 생성
-- -------------------------------------
CREATE TABLE USERS (
    user_id       NUMBER PRIMARY KEY,
    name          VARCHAR2(100),
    phone_number  VARCHAR2(20) NOT NULL UNIQUE,
    password      VARCHAR2(100) NOT NULL,
    status        VARCHAR2(20),
    created_at    DATE DEFAULT SYSDATE,
    updated_at    DATE
);

CREATE TABLE ADMINS (
    admin_id   NUMBER PRIMARY KEY,
    username   VARCHAR2(50) NOT NULL UNIQUE,
    password   VARCHAR2(100) NOT NULL,
    created_at DATE DEFAULT SYSDATE
);

CREATE TABLE SEATS (
    seat_id     NUMBER PRIMARY KEY,
    seat_number VARCHAR2(10) NOT NULL UNIQUE,
    status      VARCHAR2(20) CHECK (status IN ('available', 'reserved', 'in_use', 'closed')),
    updated_at  DATE
);

CREATE TABLE RESERVATIONS (
    reservation_id NUMBER PRIMARY KEY,
    user_id        NUMBER,
    seat_id        NUMBER,
    start_time     TIMESTAMP,
    end_time       TIMESTAMP,
    status         VARCHAR2(20) CHECK (status IN ('reserved', 'finished', 'cancelled')),
    created_at     DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id) ON DELETE CASCADE,
    FOREIGN KEY (seat_id) REFERENCES SEATS(seat_id)
);

CREATE TABLE PLANS (
    plan_id      NUMBER PRIMARY KEY,
    name         VARCHAR2(100),
    duration_min NUMBER,
    price        NUMBER,
    description  VARCHAR2(200),
    created_at   DATE DEFAULT SYSDATE
);

CREATE TABLE PAYMENTS (
    payment_id     NUMBER PRIMARY KEY,
    user_id        NUMBER,
    plan_id        NUMBER,
    reservation_id NUMBER,
    mileage_used   NUMBER,
    total_amount   NUMBER,
    payment_time   DATE DEFAULT SYSDATE,
    status         VARCHAR2(20) CHECK (status IN ('completed', 'cancelled', 'refunded')),
    FOREIGN KEY (user_id)        REFERENCES USERS(user_id),
    FOREIGN KEY (plan_id)        REFERENCES PLANS(plan_id),
    FOREIGN KEY (reservation_id) REFERENCES RESERVATIONS(reservation_id) ON DELETE CASCADE
);

CREATE TABLE MILEAGE (
    mileage_id    NUMBER PRIMARY KEY,
    user_id       NUMBER,
    change_amount NUMBER,
    reason        VARCHAR2(200),
    created_at    DATE DEFAULT SYSDATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id)
);

CREATE TABLE ADMIN_ACTIONS (
    log_id      NUMBER PRIMARY KEY,
    admin_id    NUMBER,
    action_type VARCHAR2(100),
    target_info VARCHAR2(200),
    action_time DATE DEFAULT SYSDATE,
    FOREIGN KEY (admin_id) REFERENCES ADMINS(admin_id)
);

-- -------------------------------------
-- 뷰 생성: 마일리지 합계
-- -------------------------------------
CREATE OR REPLACE VIEW MILEAGE_SUMMARY AS
SELECT user_id, SUM(change_amount) AS total_mileage
FROM MILEAGE
GROUP BY user_id;

-- -------------------------------------
-- 트리거
-- -------------------------------------
-- 좌석 예약 시 상태 변경
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Update
AFTER INSERT ON RESERVATIONS
FOR EACH ROW
BEGIN
    UPDATE SEATS
    SET status = 'reserved'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 종료 시 좌석 상태 복구
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Release
AFTER UPDATE OF status ON RESERVATIONS
FOR EACH ROW
WHEN (NEW.status = 'finished')
BEGIN
    UPDATE SEATS
    SET status = 'available'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 취소 시 좌석 상태 복구
CREATE OR REPLACE TRIGGER TRG_SeatStatus_Cancel
AFTER UPDATE OF status ON RESERVATIONS
FOR EACH ROW
WHEN (NEW.status = 'cancelled')
BEGIN
    UPDATE SEATS
    SET status = 'available'
    WHERE seat_id = :NEW.seat_id;
END;
/

-- 예약 시간 유효성 검사
CREATE OR REPLACE TRIGGER TRG_Reservation_Time_Validation
BEFORE INSERT OR UPDATE ON RESERVATIONS
FOR EACH ROW
BEGIN
    IF :NEW.start_time >= :NEW.end_time THEN
        RAISE_APPLICATION_ERROR(-20002, '시작 시간이 종료 시간보다 같거나 늦을 수 없습니다.');
    END IF;
END;
/

-- 결제 완료 시 마일리지 자동 적립
CREATE OR REPLACE TRIGGER TRG_Mileage_AutoEarn
AFTER INSERT ON PAYMENTS
FOR EACH ROW
WHEN (NEW.status = 'completed')
DECLARE
    v_mileage NUMBER;
BEGIN
    v_mileage := :NEW.total_amount * 0.1;
    INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
    VALUES (SEQ_MILEAGE_ID.NEXTVAL, :NEW.user_id, v_mileage, '자동 적립', SYSDATE);
END;
/

-- -------------------------------------
-- 예약 + 결제 + 마일리지 트랜잭션 프로시저 (중복 예약 강화됨)
-- -------------------------------------
CREATE OR REPLACE PROCEDURE PROC_RESERVE_AND_PAY (
    p_user_id       IN NUMBER,
    p_seat_id       IN NUMBER,
    p_plan_id       IN NUMBER,
    p_start_time    IN TIMESTAMP,
    p_end_time      IN TIMESTAMP,
    p_mileage_use   IN NUMBER DEFAULT 0
) IS
    v_reservation_id RESERVATIONS.reservation_id%TYPE;
    v_amount         NUMBER;
    v_count          NUMBER;
BEGIN
    -- 좌석 중복 확인 (예약, 사용 중 포함)
    SELECT COUNT(*) INTO v_count
    FROM RESERVATIONS
    WHERE seat_id = p_seat_id
      AND status IN ('reserved', 'in_use')
      AND p_start_time < end_time
      AND p_end_time > start_time;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '좌석이 이미 예약되어 있습니다.');
    END IF;

    -- 예약
    INSERT INTO RESERVATIONS (
        reservation_id, user_id, seat_id, start_time, end_time, status, created_at
    ) VALUES (
        SEQ_RESERVATION_ID.NEXTVAL, p_user_id, p_seat_id,
        p_start_time, p_end_time, 'reserved', SYSDATE
    )
    RETURNING reservation_id INTO v_reservation_id;

    -- 금액 계산
    SELECT price INTO v_amount FROM PLANS WHERE plan_id = p_plan_id;
    v_amount := v_amount - p_mileage_use;

    -- 결제
    INSERT INTO PAYMENTS (
        payment_id, user_id, plan_id, reservation_id,
        mileage_used, total_amount, status, payment_time
    ) VALUES (
        SEQ_PAYMENT_ID.NEXTVAL, p_user_id, p_plan_id, v_reservation_id,
        p_mileage_use, v_amount, 'completed', SYSDATE
    );

    -- 마일리지 사용 차감
    IF p_mileage_use > 0 THEN
        INSERT INTO MILEAGE (mileage_id, user_id, change_amount, reason, created_at)
        VALUES (SEQ_MILEAGE_ID.NEXTVAL, p_user_id, -p_mileage_use, '마일리지 사용', SYSDATE);
    END IF;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END PROC_RESERVE_AND_PAY;
/


---------------------------얘시 데이터-----------
-- USERS: 사용자
INSERT INTO USERS (user_id, name, phone_number, password, status)
VALUES (SEQ_USER_ID.NEXTVAL, '홍길동', '010-1234-5678', 'ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f', 'active');

INSERT INTO USERS (user_id, name, phone_number, password, status)
VALUES (SEQ_USER_ID.NEXTVAL, '김영희', '010-2345-6789', 'ef92b778bafe771e89245b89ecbc08a44a4e166c06659911881f383d4473e94f', 'active');

-- ADMINS: 관리자
INSERT INTO ADMINS (admin_id, username, password)
VALUES (SEQ_ADMIN_ID.NEXTVAL, 'admin1', 'adminpass');

-- SEATS: 좌석 1~10번
BEGIN
  FOR i IN 1..10 LOOP
    INSERT INTO SEATS (seat_id, seat_number, status, updated_at)
    VALUES (SEQ_SEAT_ID.NEXTVAL, 'S' || i, 'available', SYSDATE);
  END LOOP;
END;
/

-- PLANS: 요금제
INSERT INTO PLANS (plan_id, name, duration_min, price, description)
VALUES (SEQ_PLAN_ID.NEXTVAL, '1시간권', 60, 2000, '1시간 이용권');

INSERT INTO PLANS (plan_id, name, duration_min, price, description)
VALUES (SEQ_PLAN_ID.NEXTVAL, '3시간권', 180, 5000, '3시간 이용권');

-- RESERVATIONS: 예약 1건 (좌석 S1 예약 중)
DECLARE
  v_user_id   USERS.user_id%TYPE;
  v_seat_id   SEATS.seat_id%TYPE;
BEGIN
  SELECT user_id INTO v_user_id FROM USERS WHERE name = '홍길동' AND ROWNUM = 1;
  SELECT seat_id INTO v_seat_id FROM SEATS WHERE seat_number = 'S1';

  INSERT INTO RESERVATIONS (
    reservation_id, user_id, seat_id, start_time, end_time, status, created_at
  ) VALUES (
    SEQ_RESERVATION_ID.NEXTVAL, v_user_id, v_seat_id,
    SYSTIMESTAMP, SYSTIMESTAMP + INTERVAL '1' HOUR, 'reserved', SYSDATE
  );
END;
/

-- PAYMENTS: 결제 1건
DECLARE
  v_user_id USERS.user_id%TYPE;
  v_reservation_id RESERVATIONS.reservation_id%TYPE;
  v_plan_id PLANS.plan_id%TYPE;
BEGIN
  SELECT user_id INTO v_user_id FROM USERS WHERE name = '홍길동';
  SELECT reservation_id INTO v_reservation_id FROM RESERVATIONS WHERE seat_id = (
    SELECT seat_id FROM SEATS WHERE seat_number = 'S1'
  );
  SELECT plan_id INTO v_plan_id FROM PLANS WHERE name = '1시간권';

  INSERT INTO PAYMENTS (
    payment_id, user_id, plan_id, reservation_id,
    mileage_used, total_amount, status, payment_time
  ) VALUES (
    SEQ_PAYMENT_ID.NEXTVAL, v_user_id, v_plan_id, v_reservation_id,
    0, 2000, 'completed', SYSDATE
  );
END;
/
